<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on 一个经常跑偏的人</title>
    <link>/tags/rust/</link>
    <description>Recent content in Rust on 一个经常跑偏的人</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 04 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust之Trait-Object笔记</title>
      <link>/2019/05/04/rust_trait-object/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/04/rust_trait-object/</guid>
      <description>这是一篇没有技术含量的文章&amp;hellip;
 在学习Rust的历程中, 其中的灵魂便是trait这个玩意儿, 它的功能非常强大, Rust中所有的抽象几乎都是使用trait来完成的, 同时trait也保证这些抽象都是运行时零开销的. 它与我已知语言中的Python的Duck-Typing(鸭子类型), Golang的接口非常相似但功能据说更加强大, 先在这里记录一篇学习的笔记.
trait的限定与trait对象的用法:
struct Foo; trait Bar { fn baz(&amp;amp;self); } impl Bar for Foo { fn baz(&amp;amp;self) { println!(&amp;#34;{:?}&amp;#34;, self); } } fn static_dispatch&amp;lt;T&amp;gt; (t: &amp;amp;T) where T: Bar { t.baz(); } fn dynamic_dispatch(t: &amp;amp;Bar) { t.baz(); } fn main() { let foo = Foo; static_dispatch(&amp;amp;foo); // Foo 	dynamic_dispatch(&amp;amp;foo); // Foo }  可以看出static_dispatch与dynamic_dispatch行为目的是相同的, static_dispatch是泛型限定为静态分发, 而dynamic_dispatch时动态分发. (从方法命名就可以看出来, 这不是废话么(逃..
static_dispatch是为泛型T做了类型的限定, 只有实现了Bar这个trait的类型才能够使用, 因为上面已经为Foo这个结构体实现了Bar, 理所应当的t是可以调用baz()方法的.</description>
    </item>
    
    <item>
      <title>Rust基本概念</title>
      <link>/2019/01/13/rust_basic/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/01/13/rust_basic/</guid>
      <description>这是一篇没有技术含量的文章&amp;hellip;
 原始标识符 有时出于某种原因你可能需要将关键字作为名称。比如你需要调用 C 语言库中名为 match 的函数，在 C 语言中 match 不是关键字。为此你可以使用 “原始标识符”（“raw identifier”）。原始标识符以 r# 开头：
let r#fn = &amp;#34;the variable is named &amp;lt;fn&amp;gt;, even though that&amp;#39;s a keyword&amp;#34;; // 使用r#可以让关键字变成一个普通的变量名称 // 但没有必要这样做, 可能会带来不必要的麻烦  变量的可变性 变量默认是不可改变的（immutable）。这是推动你以充分利用 Rust 提供的安全性和简单并发性来编写代码的众多方式之一。不过，你仍然可以使用可变变量。让我们探讨一下 Rust 拥抱不可变性的原因及方法，以及何时你不想使用不可变性。
例如
fn main() { let x = 5; println!(&amp;#34;the value of x is: {}&amp;#34;, x); x = 6; println!(&amp;#34;the value of x is: {}&amp;#34;, x); } // 这段代码并不会被成功编译, 因为默认的变量是不可改变的, 如果需要使用可变的变量需要在创建变量的时候使用mut关键字 /** let mut x = 5; // 创建变量x为一个可变变量并初始化值为5 x = 6; // 这才是正确的创建可变变量方法 */  常量 如上所述, 这样的特性你可能会想到常量, 因为常量就是不可变的.</description>
    </item>
    
  </channel>
</rss>