<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机理论 on 0xNote</title>
    <link>/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/</link>
    <description>Recent content in 计算机理论 on 0xNote</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 11 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解&#34;抽象&#34;这个词</title>
      <link>/2019/01/11/abstract/</link>
      <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/01/11/abstract/</guid>
      <description>这是一篇没有技术含量的文章&amp;hellip;
 我一直对&amp;rdquo;抽象&amp;rdquo;这个词有着不解的迷惑, 一直以来都是似懂非懂, 说不出它的具体含义, 但却一直没有真正取试图了解它的含义, 直到现在我在维基百科, 各种知识问答中吸取他们的理解, 直到碰到下面这段话, 我觉得它非常贴合我目前的理解, 从网络上将其截取并保存在博客上用作加深印象.
面向对象软件开发的一个基本方法就是抽象，到底什么是抽象呢? 抽象是从众多的事物中抽取出共同的、本质性的特征，而舍弃其非本质的特征。 例如苹果、香蕉、生梨、葡萄、桃子等，它们共同的特性就是水果。 得出水果概念的过程，就是一个抽象的过程。 要抽象，就必须进行比较，没有比较就无法找到共同的部分。 共同特征是指那些能把一类事物与他类事物区分开来的特征， 这些具有区分作用的特征又称本质特征。 因此抽取事物的共同特征就是抽取事物的本质特征，舍弃不同特征。 所以抽象的过程也是一个裁剪的过程，不同的、非本质性的特征全部裁剪掉了。 所谓的共同特征，是相对的，是指从某一个刻面看是共同的。 比如，对于汽车和大米，从买卖的角度看都是商品，都有价格， 这是他们的共同的特征，而从其他方面来比较是，他们则是不同的。 所以在抽象时，同与不同，决定于从什么角度上来抽象。 抽象的角度取决于分析问题的目的。 在软件开发过程中， 识别稳定的需求、识别核心的需求、识别概念性的需求、 设计系统的架构、定义系统中构件之间的接口关系等等都是抽象的过程， 都是反应系统的本质特征的过程。 抽象的，才是稳定的，才是永恒的。 抽象的反义词是具体。 人员往往会说：“你讲的太抽象了，能不能讲的具体一点?”在开发语言中， 有抽象类，有具体类，具体类可以继承自抽象类，可以实例化。 抽象类可以派生出众多的不同的具体类。所谓：“一生二，二生三，三生万物”。 系统的稳定体现在抽象类，系统的变化体现在具体类。抽象类的层次要高于具体类。 系统因抽象而稳定，因抽象而生动。
我想, 那些艺术家所画的抽象画大概也就是剥离事物的本质与艺术家对其的观点与角度而描绘出来的令普通人无法理解的画面.</description>
    </item>
    
  </channel>
</rss>